// CompactCryptoGroupAlgebra - C# implementation of abelian group algebra for experimental cryptography

// SPDX-FileCopyrightText: 2022 Lukas Prediger <lumip@lumip.de>
// SPDX-License-Identifier: GPL-3.0-or-later
// SPDX-FileType: SOURCE

// CompactCryptoGroupAlgebra is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CompactCryptoGroupAlgebra is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

using System.Numerics;

namespace CompactCryptoGroupAlgebra.EllipticCurves
{
    /// <summary>
    /// A set of parameters of an elliptic curve with prime order over the
    /// finite field defined by prime P.
    /// </summary>
    public class CurveParameters
    {

        /// <summary>
        /// The order of the generator for the defined elliptic curve.
        /// </summary>
        public BigPrime Order { get; }

        /// <summary>
        /// A generator for the defined elliptic curve.
        /// </summary>
        public CurvePoint Generator { get; }

        /// <summary>
        /// The cofactor of the defined elliptic curve.
        ///
        /// The cofactor is the ratio of the number of points on the curve
        /// and the order of the subgroup of safe points generated by the generator.
        /// </summary>
        public BigInteger Cofactor { get; }

        /// <summary>
        /// The equation characterizing the shape of the curve.
        /// </summary>
        public CurveEquation Equation { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurveParameters"/> struct
        /// with the given values.
        /// </summary>
        /// <returns><see cref="CurveParameters"/> instance with the given
        /// parameters.</returns>
        /// <param name="curveEquation">The <see cref="CurveEquation"/> describing the curve.</param>
        /// <param name="generator">Curve generator point.</param>
        /// <param name="order">Generator order.</param>
        /// <param name="cofactor">Curve cofactor.</param>
        public CurveParameters(
            CurveEquation curveEquation,
            CurvePoint generator,
            BigPrime order,
            BigInteger cofactor
        )
        {
            Equation = curveEquation;
            Generator = generator;
            Order = order;
            Cofactor = cofactor;
        }

        /// <summary>
        /// A parameter set for the NIST P-256 elliptic curve
        /// of form <c>y² = x³ + Ax + B</c>.
        /// </summary>
        /// <remarks>
        /// As defined in https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf, p.91.
        /// </remarks>
        /// <returns><see cref="CurveParameters"/> for the NIST P-256 curve.</returns>
        public static readonly CurveParameters NISTP256 = new CurveParameters(
            curveEquation: new WeierstrassCurveEquation(
                prime: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
                    0x00 // extra 0 to ensure positivity
                })), // 115792089210356248762697446949407573530086143415290314195533631308867097853951
                a: new BigInteger(-3),
                b: new BigInteger(new byte[] {
                    0x4b, 0x60, 0xd2, 0x27, 0x3e, 0x3c, 0xce, 0x3b,
                    0xf6, 0xb0, 0x53, 0xcc, 0xb0, 0x06, 0x1d, 0x65,
                    0xbc, 0x86, 0x98, 0x76, 0x55, 0xbd, 0xeb, 0xb3,
                    0xe7, 0x93, 0x3a, 0xaa, 0xd8, 0x35, 0xc6, 0x5a,
                    0x00 // extra 0 to ensure positivity
                })
            ),
            generator: new CurvePoint(
                new BigInteger(new byte[] {
                    0x96, 0xc2, 0x98, 0xd8, 0x45, 0x39, 0xa1, 0xf4,
                    0xa0, 0x33, 0xeb, 0x2d, 0x81, 0x7d, 0x03, 0x77,
                    0xf2, 0x40, 0xa4, 0x63, 0xe5, 0xe6, 0xbc, 0xf8,
                    0x47, 0x42, 0x2c, 0xe1, 0xf2, 0xd1, 0x17, 0x6b,
                }),
                new BigInteger(new byte[] {
                    0xf5, 0x51, 0xbf, 0x37, 0x68, 0x40, 0xb6, 0xcb,
                    0xce, 0x5e, 0x31, 0x6b, 0x57, 0x33, 0xce, 0x2b,
                    0x16, 0x9e, 0x0f, 0x7c, 0x4a, 0xeb, 0xe7, 0x8e,
                    0x9b, 0x7f, 0x1a, 0xfe, 0xe2, 0x42, 0xe3, 0x4f,
                    0x00 // extra 0 to ensure positivity
                })
            ),
            order: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                0x51, 0x25, 0x63, 0xfc, 0xc2, 0xca, 0xb9, 0xf3,
                0x84, 0x9e, 0x17, 0xa7, 0xad, 0xfa, 0xe6, 0xbc,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
                0x00
            })), // "115792089210356248762697446949407573529996955224135760342422259061068512044369")
            cofactor: 1
        );

        /// <summary>
        /// A parameter set for the NIST P-384 elliptic curve
        /// of form <c>y² = x³ + Ax + B</c>.
        /// </summary>
        /// <remarks>
        /// As defined in https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf, p.91.
        /// </remarks>
        /// <returns><see cref="CurveParameters"/> for the NIST P-384 curve.</returns>
        public static readonly CurveParameters NISTP384 = new CurveParameters(
            curveEquation: new WeierstrassCurveEquation(
                prime: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
                    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0x00  // extra 0 to ensure positivity
                })), // 39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319
                a: new BigInteger(-3),
                b: new BigInteger(new byte[] {
                    0xef, 0x2a, 0xec, 0xd3, 0xed, 0xc8, 0x85, 0x2a,
                    0x9d, 0xd1, 0x2e, 0x8a, 0x8d, 0x39, 0x56, 0xc6,
                    0x5a, 0x87, 0x13, 0x50, 0x8f, 0x08, 0x14, 0x03,
                    0x12, 0x41, 0x81, 0xfe, 0x6e, 0x9c, 0x1d, 0x18,
                    0x19, 0x2d, 0xf8, 0xe3, 0x6b, 0x05, 0x8e, 0x98,
                    0xe4, 0xe7, 0x3e, 0xe2, 0xa7, 0x2f, 0x31, 0xb3,
                    0x00 // extra 0 to ensure positivity
                })
            ),
            generator: new CurvePoint(
                new BigInteger(new byte[] {
                    0xb7, 0x0a, 0x76, 0x72, 0x38, 0x5e, 0x54, 0x3a,
                    0x6c, 0x29, 0x55, 0xbf, 0x5d, 0xf2, 0x02, 0x55,
                    0x38, 0x2a, 0x54, 0x82, 0xe0, 0x41, 0xf7, 0x59,
                    0x98, 0x9b, 0xa7, 0x8b, 0x62, 0x3b, 0x1d, 0x6e,
                    0x74, 0xad, 0x20, 0xf3, 0x1e, 0xc7, 0xb1, 0x8e,
                    0x37, 0x05, 0x8b, 0xbe, 0x22, 0xca, 0x87, 0xaa,
                    0x00 // extra 0 to ensure positivity
                }),
                new BigInteger(new byte[] {
                    0x5f, 0x0e, 0xea, 0x90, 0x7c, 0x1d, 0x43, 0x7a,
                    0x9d, 0x81, 0x7e, 0x1d, 0xce, 0xb1, 0x60, 0x0a,
                    0xc0, 0xb8, 0xf0, 0xb5, 0x13, 0x31, 0xda, 0xe9,
                    0x7c, 0x14, 0x9a, 0x28, 0xbd, 0x1d, 0xf4, 0xf8,
                    0x29, 0xdc, 0x92, 0x92, 0xbf, 0x98, 0x9e, 0x5d,
                    0x6f, 0x2c, 0x26, 0x96, 0x4a, 0xde, 0x17, 0x36,
                    0x00 // extra 0 to ensure positivity
                })
            ),
            order: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                0x73, 0x29, 0xc5, 0xcc, 0x6a, 0x19, 0xec, 0xec,
                0x7a, 0xa7, 0xb0, 0x48, 0xb2, 0x0d, 0x1a, 0x58,
                0xdf, 0x2d, 0x37, 0xf4, 0x81, 0x4d, 0x63, 0xc7,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x00 // extra 0 to ensure positivity
            })), // 39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643
            cofactor: 1
        );

        /// <summary>
        /// A parameter set for the NIST P-521 elliptic curve
        /// of form <c>y² = x³ + Ax + B</c>.
        /// </summary>
        /// <remarks>
        /// As defined in https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf, p.92.
        /// </remarks>
        /// <returns><see cref="CurveParameters"/> for the NIST P-521 curve.</returns>
        public static readonly CurveParameters NISTP521 = new CurveParameters(
            curveEquation: new WeierstrassCurveEquation(
                prime: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0x01, 0x00
                })), // 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151
                a: new BigInteger(-3),
                b: new BigInteger(new byte[] {
                    0x00, 0x3f, 0x50, 0x6b, 0xd4, 0x1f, 0x45, 0xef,
                    0xf1, 0x34, 0x2c, 0x3d, 0x88, 0xdf, 0x73, 0x35,
                    0x07, 0xbf, 0xb1, 0x3b, 0xbd, 0xc0, 0x52, 0x16,
                    0x7b, 0x93, 0x7e, 0xec, 0x51, 0x39, 0x19, 0x56,
                    0xe1, 0x09, 0xf1, 0x8e, 0x91, 0x89, 0xb4, 0xb8,
                    0xf3, 0x15, 0xb3, 0x99, 0x5b, 0x72, 0xda, 0xa2,
                    0xee, 0x40, 0x85, 0xb6, 0xa0, 0x21, 0x9a, 0x92,
                    0x1f, 0x9a, 0x1c, 0x8e, 0x61, 0xb9, 0x3e, 0x95,
                    0x51, 0x00,
                })
            ),
            generator: new CurvePoint(
                new BigInteger(new byte[] {
                    0x66, 0xbd, 0xe5, 0xc2, 0x31, 0x7e, 0x7e, 0xf9,
                    0x9b, 0x42, 0x6a, 0x85, 0xc1, 0xb3, 0x48, 0x33,
                    0xde, 0xa8, 0xff, 0xa2, 0x27, 0xc1, 0x1d, 0xfe,
                    0x28, 0x59, 0xe7, 0xef, 0x77, 0x5e, 0x4b, 0xa1,
                    0xba, 0x3d, 0x4d, 0x6b, 0x60, 0xaf, 0x28, 0xf8,
                    0x21, 0xb5, 0x3f, 0x05, 0x39, 0x81, 0x64, 0x9c,
                    0x42, 0xb4, 0x95, 0x23, 0x66, 0xcb, 0x3e, 0x9e,
                    0xcd, 0xe9, 0x04, 0x04, 0xb7, 0x06, 0x8e, 0x85,
                    0xc6, 0x00,
                }),
                new BigInteger(new byte[] {
                    0x50, 0x66, 0xd1, 0x9f, 0x76, 0x94, 0xbe, 0x88,
                    0x40, 0xc2, 0x72, 0xa2, 0x86, 0x70, 0x3c, 0x35,
                    0x61, 0x07, 0xad, 0x3f, 0x01, 0xb9, 0x50, 0xc5,
                    0x40, 0x26, 0xf4, 0x5e, 0x99, 0x72, 0xee, 0x97,
                    0x2c, 0x66, 0x3e, 0x27, 0x17, 0xbd, 0xaf, 0x17,
                    0x68, 0x44, 0x9b, 0x57, 0x49, 0x44, 0xf5, 0x98,
                    0xd9, 0x1b, 0x7d, 0x2c, 0xb4, 0x5f, 0x8a, 0x5c,
                    0x04, 0xc0, 0x3b, 0x9a, 0x78, 0x6a, 0x29, 0x39,
                    0x18, 0x01,
                })
            ),
            order: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                0x09, 0x64, 0x38, 0x91, 0x1e, 0xb7, 0x6f, 0xbb,
                0xae, 0x47, 0x9c, 0x89, 0xb8, 0xc9, 0xb5, 0x3b,
                0xd0, 0xa5, 0x09, 0xf7, 0x48, 0x01, 0xcc, 0x7f,
                0x6b, 0x96, 0x2f, 0xbf, 0x83, 0x87, 0x86, 0x51,
                0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0x01, 0x00
            })), // 6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449
            cofactor: 1
        );

        /// <summary>
        /// A parameter set for the Curve25519 elliptic curve.
        /// of form <c>By² = x³ + Ax² + x</c>.
        /// </summary>
        /// <remarks>
        /// As defined in https://tools.ietf.org/html/rfc7748#section-4.1 .
        /// </remarks>
        /// <returns><see cref="CurveParameters"/> for the Curve25519 curve.</returns>
        public static readonly CurveParameters Curve25519 = new CurveParameters(
            curveEquation: new MontgomeryCurveEquation(
                prime: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                    0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
                    0x00 // extra 0 to ensure positivity
                })), // 2^255 - 19
            a: new BigInteger(486662),
                b: BigInteger.One
            ),
            generator: new CurvePoint(
                new BigInteger(9),
                new BigInteger(new byte[] {
                    0xd9, 0xd3, 0xce, 0x7e, 0xa2, 0xc5, 0xe9, 0x29,
                    0xb2, 0x61, 0x7c, 0x6d, 0x7e, 0x4d, 0x3d, 0x92,
                    0x4c, 0xd1, 0x48, 0x77, 0x2c, 0xdd, 0x1e, 0xe0,
                    0xb4, 0x86, 0xa0, 0xb8, 0xa1, 0x19, 0xae, 0x20,
                    0x00 // extra 0 to ensure positivity
                }) // 14781619447589544791020593568409986887264606134616475288964881837755586237401
            ),
            order: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
                0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
                0x00 // extra 0 to ensure positivity
            })), // 7237005577332262213973186563042994240857116359379907606001950938285454250989
            cofactor: 8
        );

        /// <summary>
        /// A parameter set for the M383 elliptic curve.
        /// of form <c>By² = x³ + Ax² + x</c>.
        /// </summary>
        /// <remarks>
        /// As defined in https://eprint.iacr.org/2013/647.pdf , with further derived parameters taken from https://safecurves.cr.yp.to/.
        /// </remarks>
        /// <returns><see cref="CurveParameters"/> for the M383 curve.</returns>
        public static readonly CurveParameters M383 = new CurveParameters(
            curveEquation: new MontgomeryCurveEquation(
                prime: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                    0x45, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
                    0x00 // extra 0 to ensure positivity
                })), // 2^383 - 187
                a: new BigInteger(2065150),
                b: BigInteger.One
            ),
            generator: new CurvePoint(
                new BigInteger(12),
                new BigInteger(new byte[] {
                    0x7e, 0xe7, 0x55, 0x25, 0xb6, 0x91, 0x99, 0x96,
                    0x2e, 0x33, 0x6e, 0x0b, 0x7d, 0x2e, 0x1b, 0x1f,
                    0xaa, 0x17, 0xf6, 0x90, 0x12, 0x86, 0x92, 0x39,
                    0xbd, 0x8a, 0x98, 0xe8, 0xf0, 0x65, 0xc1, 0xe7,
                    0x28, 0xf3, 0xa0, 0x2d, 0x4b, 0x30, 0x0e, 0x31,
                    0xaf, 0x34, 0xf8, 0xaa, 0x04, 0xed, 0xc7, 0x1e,
                    0x00 // extra 0 to ensure positivity
                }) // 4737623401891753997660546300375902576839617167257703725630389791524463565757299203154901655432096558642117242906494
            ),
            order: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                0xd7, 0x71, 0x90, 0xbe, 0x25, 0xc2, 0xbb, 0x46,
                0x9e, 0x24, 0x1b, 0x7b, 0x6f, 0x57, 0x32, 0x7a,
                0x6e, 0xba, 0x36, 0xac, 0x73, 0x96, 0xc7, 0x06,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
                0x00 // extra 0 to ensure positivity
            })), // 2462625387274654950767440006258975862817483704404090416746934574041288984234680883008327183083615266784870011007447
            cofactor: 8
        );


        /// <summary>
        /// A parameter set for the M511 elliptic curve.
        /// of form <c>By² = x³ + Ax² + x</c>.
        /// </summary>
        /// <remarks>
        /// As defined in https://eprint.iacr.org/2013/647.pdf , with further derived parameters taken from https://safecurves.cr.yp.to/.
        /// </remarks>
        /// <returns><see cref="CurveParameters"/> for the M511 curve.</returns>
        public static readonly CurveParameters M511 = new CurveParameters(
            curveEquation: new MontgomeryCurveEquation(
                prime: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                    0x45, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
                    0x00 // extra 0 to ensure positivity
                })), // 2^511 - 187
                a: new BigInteger(530438),
                b: BigInteger.One
            ),
            generator: new CurvePoint(
                new BigInteger(5),
                new BigInteger(new byte[] {
                    0xa5, 0x6f, 0x05, 0xaf, 0x64, 0x0a, 0xe3, 0x95,
                    0xa8, 0x93, 0x20, 0x54, 0xca, 0xdb, 0xf1, 0xe9,
                    0xab, 0x40, 0x59, 0x45, 0xc4, 0x8a, 0x30, 0x49,
                    0xbf, 0x3d, 0xa4, 0xe8, 0x29, 0x94, 0x2b, 0x42,
                    0x09, 0xc8, 0x90, 0x9b, 0x38, 0x96, 0x3f, 0xee,
                    0x01, 0x6e, 0x8f, 0xcf, 0xc1, 0x9a, 0x39, 0x32,
                    0x8d, 0x48, 0xbb, 0x54, 0xd3, 0xba, 0xfd, 0x28,
                    0x3d, 0x80, 0x30, 0x85, 0xad, 0xc0, 0xbd, 0x2f,
                    0x00 // extra 0 to ensure positivity
                }) // 2500410645565072423368981149139213252211568685173608590070979264248275228603899706950518127817176591878667784247582124505430745177116625808811349787373477
            ),
            order: BigPrime.CreateWithoutChecks(new BigInteger(new byte[] {
                0x1b, 0xaf, 0x6b, 0xb7, 0xba, 0x15, 0x4c, 0xa5,
                0xbf, 0x10, 0xaa, 0xa6, 0x42, 0x50, 0x12, 0xac,
                0xa2, 0x79, 0x37, 0xd1, 0xeb, 0xae, 0xb2, 0x7a,
                0x67, 0xf5, 0xc7, 0x30, 0xff, 0xfe, 0xb5, 0x17,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
                0x00 // extra 0 to ensure positivity
            })), // 837987995621412318723376562387865382967460363787024586107722590232610251879607410804876779383055508762141059258497448934987052508775626162460930737942299
            cofactor: 8
        );

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            return obj is CurveParameters parameters &&
                   Equation.Equals(parameters.Equation) &&
                   Order.Equals(parameters.Order) &&
                   Generator.Equals(parameters.Generator) &&
                   Cofactor.Equals(parameters.Cofactor);
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            var hashCode = -1791766799;
            hashCode = hashCode * -1521134295 + Equation.GetHashCode();
            hashCode = hashCode * -1521134295 + Order.GetHashCode();
            hashCode = hashCode * -1521134295 + Generator.GetHashCode();
            hashCode = hashCode * -1521134295 + Cofactor.GetHashCode();
            return hashCode;
        }
    }
}
